---
// NavPath component for the dotted-line soccer ball navigation
// This component handles all the interactive navigation logic
---

<!-- Fixed Navigation with Soccer Ball and Original Dotted Line -->
<nav class="fixed left-0 top-0 z-50 h-screen w-24 overflow-visible" style="left: 40px;" role="navigation" aria-label="Page navigation">
  <!-- Original DottedLine.svg as background -->
  <div class="absolute inset-0" aria-hidden="true">
    <img 
      src="/DottedLine.svg" 
      alt="" 
      class="h-full w-full object-contain opacity-60" 
      loading="lazy"
      decoding="async"
    />
  </div>
  
  <!-- Hidden SVG with the same path for ball movement calculations -->
  <svg 
    class="absolute top-0" 
    style="width:96px; height:930px; opacity:0;" 
    viewBox="0 0 97 930" 
    preserveAspectRatio="none" 
    aria-hidden="true"
  >
    <!-- The exact path from DottedLine.svg that the soccer ball will follow -->
    <path 
      id="navigation-path" 
      d="M10.0184 1.89356C10.8794 4.48978 13.4887 9.69525 16.3132 15.1356C19.4249 21.1289 22.1775 26.6554 24.3628 31.8805C26.4879 36.9617 27.8396 42.311 29.7966 47.7513C32.1388 54.2629 34.3628 59.2712 37.1873 65.7943C39.8991 72.0572 40.0249 78.3971 42.4058 84.0657C44.5674 89.212 46.1044 94.4962 47.8461 100.804C49.3372 106.204 50.0183 113.179 53.7104 128.169C55.6626 136.094 55.6804 143.185 56.7633 150.804C57.7661 157.86 57.4156 163.655 58.0679 173.146C60.8164 213.137 56.9851 219.297 55.6869 224.966C54.4575 230.334 52.2101 235.396 50.4684 240.621C48.4666 246.627 46.1305 254.522 43.9453 260.191C41.9642 265.33 37.8853 274.927 33.9453 282.369C31.4257 287.129 30.0314 292.8 28.2897 298.025C26.548 303.25 24.8129 308.456 24.154 313.681C23.4214 319.491 20.899 325.416 18.0745 330.641C15.154 336.043 13.0712 343.237 11.3295 348.906C9.71192 354.17 7.85268 360.197 6.111 367.164C4.49416 373.631 3.93879 378.906 3.27995 384.131C2.50647 390.265 1.32953 398.031 1.10122 441.6C0.999163 461.075 3.05164 479.362 4.57806 484.587C6.29446 490.463 6.96553 498.488 8.70722 505.239C10.2724 511.307 16.0719 521.502 21.7405 529.812C25.9161 535.934 33.4756 539.819 39.7835 543.302C45.4433 546.427 50.4358 549.395 55.6609 551.136C63.1721 553.64 73.9192 551.586 80.227 548.762C85.6572 546.33 90.0183 542.037 93.2864 536.812C96.2463 532.079 96.124 524.659 94.6106 518.547C93.1823 512.778 89.1833 508.116 85.7 502.891C82.2668 497.741 76.5806 495.487 70.2727 493.53C64.4097 491.711 59.6204 488.964 42.4841 488.736C34.5758 488.631 29.6139 494.157 24.3889 497.64C18.9569 501.261 14.8194 506.759 12.4189 511.984C9.93795 517.384 7.85268 522.415 6.32627 527.64C4.84972 532.694 3.93879 538.07 2.41237 549.76C-1.87503 582.593 4.35627 589.812 6.09796 595.481C7.75988 600.89 10.8794 605.911 12.8364 611.136C15.0804 617.128 21.7339 620.706 26.959 623.974C31.8317 627.022 37.3895 630.699 42.6146 634.626C47.6346 638.399 53.0451 641.58 59.1377 645.278C64.5746 648.579 66.535 658.07 68.7202 664.626C71.0898 671.735 73.4756 693.635 75.4651 705.285C76.6869 712.439 77.4156 719.414 78.0744 726.805C78.8134 735.095 80.0248 745.507 80.2531 775.637C80.3318 786.02 77.4417 793.752 75.9087 802.03C73.1107 817.139 69.1703 824.646 66.1305 831.397C63.4115 837.436 61.3425 843.354 58.518 849.877C55.6835 856.423 55.2629 868.09 51.3491 879.212C44.7046 898.093 41.3295 908.585 36.7829 919.225C35.6804 921.645 35.2499 922.936 34.8129 924.248C34.3758 925.559 33.9453 926.85 33.5017 928.181" 
      stroke="transparent" 
      stroke-width="2" 
      fill="none"
    />
    
    
  </svg>
  
  <!-- Soccer Ball that moves along the original dotted line path -->
  <button 
    id="soccer-ball" 
    class="absolute pointer-events-auto cursor-pointer" 
    style="transform: translate(-50%, -50%); transition: none;"
    aria-label="Navigate to next section"
    type="button"
  >
    <img 
      src="/SoccerBall.svg" 
      alt="Soccer ball navigation indicator" 
      class="animate-float-smooth"
      style="width:40px; height:40px; min-width:40px; min-height:40px; max-width:40px; max-height:40px; display:block; "
      loading="lazy"
      decoding="async"
    />
  </button>

  <!-- Navigation Labels -->
</nav>

<!-- Optimized Client-side JavaScript for SVG Path Following Soccer Ball Navigation -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const soccerBall = document.getElementById('soccer-ball');
    const navigationPath = document.getElementById('navigation-path');
    const pathLength = navigationPath.getTotalLength();

    // Offset so the ball and buttons start 10% along the path
    const offset = 0.05; // 5% offset
    const maxProgress = 0.9; // Ball and Projects stop at 90% of the path

    // This function moves the ball to the right spot based on scroll
    function updateBallPosition() {
      // How far down the page are we? (0 = top, 1 = bottom)
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = Math.min(scrollTop / scrollHeight, 1);
      // Add the offset and clamp to maxProgress
      const adjustedProgress = Math.min(progress + offset, maxProgress);

      // Find the point on the path
      const distance = adjustedProgress * pathLength;
      const point = navigationPath.getPointAtLength(distance);

      // Move the ball
      soccerBall.style.left = point.x + 'px';
      soccerBall.style.top = point.y + 'px';
    }

    // Update on scroll
    window.addEventListener('scroll', updateBallPosition);

    // Update on page load
    updateBallPosition();

    // --- Transparent Path Buttons for Section Navigation ---
    // These progress values match the ball's progress for each section, with the same offset
    // The last value (Projects) is set to 0.85 to keep it farther from the end
    const buttonProgress = [0 + offset, 1/3 + offset, 2/3 + offset, 0.9];
    const sections = document.querySelectorAll('section[id^="section-"]');

    // Store button elements for active styling
    const buttonElements = [];
    buttonProgress.forEach((progress, i) => {
      // Clamp to 1 to avoid going past the end
      const clampedProgress = Math.min(progress, 1);
      // Calculate the distance along the path for this button
      const distance = clampedProgress * pathLength;
      // Get the (x, y) coordinates on the path
      const point = navigationPath.getPointAtLength(distance);

      // Create the button element
      const btn = document.createElement('button');
      btn.style.position = 'absolute';
      btn.style.left = point.x + 'px';
      btn.style.top = point.y + 'px';
      btn.style.transform = 'translate(-50%, -50%)';
      btn.style.width = '25px';
      btn.style.height = '25px';
      btn.style.borderRadius = '50%';
      btn.style.opacity = '0.08'; // Almost invisible
      btn.style.background = '#fff';
      btn.style.border = 'none';
      btn.style.cursor = 'pointer';
      btn.setAttribute('aria-label', `Go to section ${i + 1}`);

      // On click, scroll to the corresponding section
      btn.addEventListener('click', () => {
        if (sections[i]) {
          sections[i].scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });

      // Add the button to the nav (so it's positioned correctly)
      document.querySelector('nav').appendChild(btn);
      buttonElements.push(btn);
    });

    // Function to update button styles based on active section
    function updateButtonStyles(activeIndex) {
      buttonElements.forEach((btn, i) => {
        if (i === activeIndex) {
          btn.style.opacity = '0.05'; // More visible when active
          btn.style.background = '#fff';
          btn.style.boxShadow = 'none'; // No shadow when active
          btn.style.transform = 'translate(-50%, -50%) scale(1.2)';
          btn.style.transition = 'all 0.25s cubic-bezier(0.4,0,0.2,1)';
        } else {
          btn.style.opacity = '0.08'; // Less visible when inactive
          btn.style.background = '#fff';
          btn.style.boxShadow = 'none';
          btn.style.transform = 'translate(-50%, -50%) scale(1)';
          btn.style.transition = 'all 0.25s cubic-bezier(0.4,0,0.2,1)';
        }
      });
    }

    // --- Dynamically Place Headings at Button Positions ---
    const headingLabels = ["Home", "About me", "Skills", "Projects"];
    const headingElements = [];
    buttonProgress.forEach((progress, i) => {
      const clampedProgress = Math.min(progress, 1);
      const distance = clampedProgress * pathLength;
      const point = navigationPath.getPointAtLength(distance);

      // Create the heading element
      const heading = document.createElement('div');
      heading.textContent = headingLabels[i];
      heading.style.position = 'absolute';
      heading.style.left = (point.x + 20) + 'px'; // 20px to the right of the path/ball (closer)
      heading.style.top = point.y + 'px';
      heading.style.transform = 'translateY(-50%)';
      heading.style.color = 'white';
      heading.style.fontSize = '1rem';
      heading.style.opacity = '0.3';
      heading.style.fontWeight = 'normal';
      heading.style.pointerEvents = 'auto'; // Make headings clickable
      heading.style.cursor = 'pointer';
      heading.style.transition = 'all 0.25s cubic-bezier(0.4,0,0.2,1)';
      heading.setAttribute('aria-label', `Go to section ${i + 1}`);
      heading.dataset.baseX = point.x; // Store the original x position

      // On click, scroll to the corresponding section
      heading.addEventListener('click', () => {
        if (sections[i]) {
          sections[i].scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });

      document.querySelector('nav').appendChild(heading);
      headingElements.push(heading);
    });

    // Function to update heading styles based on active section
    function updateHeadingStyles(activeIndex) {
      headingElements.forEach((heading, i) => {
        const baseX = parseFloat(heading.dataset.baseX);
        if (i === activeIndex) {
          heading.style.left = (baseX + 30) + 'px'; // More space when active
          heading.style.fontSize = '1.7rem';
          heading.style.opacity = '1';
          heading.style.fontWeight = 'bold';
          heading.style.transition = 'all 0.25s cubic-bezier(0.4,0,0.2,1)';
        } else {
          heading.style.left = (baseX + 20) + 'px'; // Less space when inactive
          heading.style.fontSize = '1rem';
          heading.style.opacity = '0.3';
          heading.style.fontWeight = 'normal';
          heading.style.transition = 'all 0.25s cubic-bezier(0.4,0,0.2,1)';
        }
      });
    }

    // Function to get the active section index based on scroll position
    function getActiveSectionIndex() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = Math.min(scrollTop / scrollHeight, 1);
      // Find the closest buttonProgress value
      let minDiff = Infinity;
      let activeIndex = 0;
      buttonProgress.forEach((bp, i) => {
        const diff = Math.abs(Math.min(progress + offset, maxProgress) - Math.min(bp, maxProgress));
        if (diff < minDiff) {
          minDiff = diff;
          activeIndex = i;
        }
      });
      return activeIndex;
    }

    // Update headings and buttons on scroll and on page load
    function handleScrollAndHeadings() {
      updateBallPosition();
      const activeIndex = getActiveSectionIndex();
      updateHeadingStyles(activeIndex);
      updateButtonStyles(activeIndex);
    }

    window.addEventListener('scroll', handleScrollAndHeadings);
    // Initial update
    handleScrollAndHeadings();
  });
</script> 